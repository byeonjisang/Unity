## 조건문 if ##

>> 조건문이란? 다수의 조건에서 각각의 조건에 따라 결과를 다르게 출력하고 싶을 때 사용하는 구문이다.
* 대표적인 조건문으로는 if, else, else if 등이 있다.
int num1=10; int num2=15; bool result; bool result2;

ex)
void Start()
{
  result = num1 < num2; // 이 식의 조건은 총 2가지이다.(참 또는 거짓)
  
  >> bool형 변수인 result의 값에 따라 다른 결과를 만들 때, if를 사용한다
  if(result) // result가 true 일 때
 {
  print("num1<num2");
 } 
 
 if(!result) // result가 false 일 때 ->  result 변수에 !을 씌워서 부정문으로 만든다
 {
  print("num1>num2");
 } 
 * if() 안에는 변수뿐만 아니라 식 자체가 들어가도 무방하다. -> if(num1<num2)
 
 >> 조건문인 if가 여러개일 경우, 첫번째 조건을 만족하더라도 다른 조건문을 쓸데없이 계속 확인한다. (연산낭비)
    이를 해결하기 위해 else if를 사용한다.
    
 if(result2)
 {
  print("num1<num2");
 } 
 
  else if(!result2) // else if를 사용할 경우 조건문을 하나로 만들어버린다. 즉, 만약 첫번째 조건이 만족할 때에는 else if 조건문은 실행없이 넘어간다.
                       조건문 하나하나를 통합시킬 때 유용하다.
 {
  print("num1>num2");
 } 
 
 else // else 는 if 와 else if를 포함한 모든 조건을 만족하지 않을 때 실행된다. 보통 조건문을 전부 만든 후 맨 마지막에 최후의 경우의 수일때 사용한다.
  print("none");
 
} 
 
 
## 조건문 switch ##

>> switch는 식이 아닌 특정 경우의 수 하나하나를 case로 지정하여 만드는 조건문이다.

ex)
switch(result)
{
  case 10: // case에 특정한 값을 집어넣어 그 값이 만족할 때에만 출력하게 한다. => if(result == 10)
   print("result=10");
  case 11:
   print("result=11");
  case 12:
   print("result=12"); 
  default: // default 는 if 조건문의 else 역할과 동일하다. 아무런 조건이 만족되지 않을 경우 사용한다.
   print("none");
}

>> if 와 switch 둘 다 int뿐만 아니라 다양한 자료형을 입력해서 조건문을 생성해도 무방하다.

>> if 조건문과 switch 조건문은 각자의 취향이나 상황에 맞게 사용해주는 것이 좋다.
