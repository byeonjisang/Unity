## 충돌 판정 기능을 적용하기 위한 요소 ##
1. 리지드바디(Rigidbody) => 오브젝트에 물리적인 움직임을 적용시키는 컴포넌트
>> 아무리 스크립트로 물리적인 운동을 시켜도 리지드바디가 적용되지 않으면 절대 오브젝트는 움직이지 않음.

2. 콜라이더(collider) => 오브젝트에 충돌을 하는 형태를 적용시키는 컴포넌트
 >> 보통 콜라이더의 형태는 사각형, 원형, 캡슐형, 그림과 유사한 모양 등으로 설정할 수 있다.
 하지만 이미지를 이용하여 쓰는 경우 그림과 유사한 모양으로 설정하는 Polygon collider를 주로 많이 사용한다. 
 (정해진 형태로 설정 할 경우 여백이 남아 충돌 판정이 이상하게 느껴짐)
 
 이렇게 오브젝트에 충돌 판정을 적용시켰을 경우 적용이 잘 되지만, 기본적으로 중력이 존재하기 때문에 충돌 시 오브젝트가 낙하하거나 회전해버리는 상황이 발생한다.
 >> Rigidbody2D에 있는 Gravity Scale의 수치를 0으로 설정해준 후, Constraints 항목의 z축을 Freeze Rotation 해주면 된다.
 스크립트에서는 Rigidbody2D.gravityScale = 0; 그리고 Rigidbody2D.constraints = RigidbidyConstraints2D.FreezeRotation;
 
 ## 오브젝트를 이동시키는 방법 ##
 앞서 사용했던 transform.Translate()는 위치를 강제적으로 이동시키기 때문에 조금 부자연스러울 수 있다.
 >> Rigidbody2D를 적용시킨 후, Rigidbody2D.velocity =  new Vector2(vx,vy); 를 사용한다. ( 오브젝트의 벡터값을 변경 )
 
 1. 일시적으로 자동 이동
 어떠한 반응 없이 자동으로 움직였다가 멈추는 행동을 하려면, 오브젝트에 count를 설정하여 count를 셀 동안만 움직이게 하면 된다.
 >> count = 0 으로 지정 후, FixedUpdate() 에서 'count == 숫자' 일 경우 this.GetComponent<Rigidbody2D>().velocity = new Vector 2 (0,0);
 로 속도를 멈추게 한 다음 count += 1; 로 하나씩 카운트를 늘려나간다.
 
 1-1. 좌표를 찾아 이동 (오브젝트를 쫓아가거나, 도망칠 때)
 카운트를 이용하여 일정 시간만큼만 이동하는 반면, 특정 오브젝트의 좌표나 다른 좌표를 찾아서 이동하는 것도 가능하다.
 먼저 스크립트에 GameObject형의 targetObject를 정해주고, 'targetObject = GameObject.Find(targetObjectName);' 코드로 targetObject의 위치를 찾아낸다.
 위치를 찾았으니 targetObject로의 방향을 구한다. >> Vector3 dir = (목표 오브젝트 좌표 - 설정 오브젝트의 좌표).normalized;
 그 후 이동시켜준다. >> float vx/vy = dir.x/y * speed; rbody.velocity = new Vector2(vx,vy);
 * 도망치는 행동의 경우에는 speed값들만 -speed로 적용시켜주면 된다.
 
 
 2. 키 입력시 이동
 키 입력을 받았을 때만 이동하는 행동을 적용시키려면, Input.GetKey("키이름") 으로 적용시켜주면 된다.
 >> public float speed; 로 속도를 지정 후, Update() 함수에 'if(Input.GetKey("방향키")) , vx/vy = speed/-speed;' 로 상하좌우 이동을 설정해 주고
 FixedUpdate() 함수에 RigidBody.velocity = new Vector2(vx,vy); 로 벡터값을 넣어준다.
 * 키 입력으로 오브젝트를 이동시켜도 이미지는 반전되지 않는다. 그러므로 this.GetComponent<SpriteRenderer>().flipX 로 좌우반전 설정을 해주어야 한다.
 
 2-1. 직선으로 이동하기
 1) MoveTowards
 매개변수 - 위치, 목표, 이동속도
 => transform.position = Vector3.MoveTowards(transform.position, target, 2f); 
 
 2) SmoothDamp
 매개변수 - 위치, 목표위치, 참조 속도, 속도 
 # 참조속도는 잘 활용되지 않으므로 0으로 초기화.
 Vector3 velo = Vector3.zero;
=> transform.position = Vector3.SmoothDamp(transform.position, target, ref velo, 2f

3) Lerp (선형보간이동)
=> transform.position = Vector3.Lerp(transform.position, target, 1f);

4) SLerp(구면선형보간이동)
=> transform.position = Vector3.Slerp(transform.position, target, 2f); 

!! 중요 !!
-> Time.deltaTime 사용하기
deltaTime이란? 프레임이 적으면 값이 커지고, 프레임이 많으면 값이 작아진다.
1) Translate: 벡터에 곱해주면 된다.
ex) transform.Translate(Vector * Time.deltaTime);

2) Vector: 시간 매개변수에 곱하기
ex) Vector3.Lerp(Vec1, Vec2, T * Time.deltaTime);

2-2 회전 및 방향전환

1) 회전하기: Rotate() 함수 사용 => 물체 자체가 회전한다.
=> transform.Rotate(x,y,z); // 각각의 축을 기준으로 회전시킨다는 의미이다. (평균적으로는 z축을 기준으로 회전시켜야 보임)

ex) float angle = 90;
    void FixedUpdate()
   {
     this.transform.Rotate(0, 0, angle/50); // 지정한 각도를 50프레임에 나누어 회전한다
   }  
    
   
2) 방향전환 회전 => 물체가 나아가는 방향이 바뀐다

ex) int count = 0;
    float angle = 90;
    int Maxcount;
    
    void FixedUpdate()
   {
      this.transform.Translate(1,0,0) // 물체가 조금씩 이동한다
      count += 1; // 카운트를 센다
      if(count >= Maxcount) // 카운트가 꽉 차면
     {
       this.transform.Rotate(0,0,angle/50); // 지정한 각도로 한번 회전한다
       count = 0; // 카운트를 초기화
     }
   }
   
3) 좌우 방향전환 => 회전이 아닌 물체의 좌우만 바껴 회전한다.
flipX 이용 => SpriteRenderer.flipX = true; // 해당 오브젝트가 X 축 기준으로 반전된다.



3-1 충돌판정 설정

## 게임을 정지시킬때 ##
 오브젝트들의 행동 전체를 중지시키고 싶을 때에는 Time.timeScale 을 이용하여 정지시키거나 재생시킬 수 있다. ( 정지일때는 0, 재생일때는 1)
 Collision2D 함수나 OnMouseButton 등 버튼함수에도 사용이 가능하다.
 * 시간을 정지시키는 함수를 코딩하려면 Start() 함수에 Time.timeScale = 1; 로 시간을 움직여야 한다. (시간이 처음부터 정지되어버림)
 
 ## 오브젝트 지움 및 표시할 때 ##
 오브젝트를 지우거나 표시할 경우에는 GameObject.SetActive(false/true); 를 사용하면 된다.
 보통 오브젝트끼리 충돌 시에 많이 사용하는 코드이다.
 >> targetObejctName 과 hide/showObjectName 변수를 지정하고 CollisionEnter2D 함수에서 if(collision.gmaeObject.name == targetObjectName) 일 때
 GameObject hide/showObject = GameObject.Find(hide/showObject); 로 지우거나 표시할 오브젝트를 찾은 후
 hide/showObject.SetActive(false/true); 로 해당 오브젝트를 지우거나 표시한다.
 
=> 오브젝트 간의 충돌판정을 지정해 주는 함수는 총 2가지가 있다.

1) OnCollisionEnter2D(Collision2D collision)
-> 해당 함수는 충돌이 일어났을 시 실행시키는 함수이다.
-> 인자는 충돌하는 오브젝트의 Collision2D를 지정하는 변수이다.

Ex) void CollisionEnter2D( Collision2D collision ) // 충돌 함수 설정
  {
     if(collision.gameObject.tag == "enemy") // enemy라는 이름의 적과 충돌 시
   {
     this.transform.Rotate(0, 0, angle/50); // 한번 회전한다
   }
  }
  
2) OnTriggerEnter2D( Collision2D collision )
-> 해당 함수는 충돌 시에 물리적인 힘을 받아 멈추거나 뒤로 밀리는 것이 아닌
   충돌한 오브젝트가 바로 사라질때 실행되는 함수이다. ( 유니티 엔진 내에서 is Trigger라는 기능을 체크 시에 실행 )
Ex) 
  public gameObject hideObject; 
  void OnTriggerEnter2D (Collision2D collision) // 트리거 충돌 함수 생성
{
  if(collision.gameObject.layer == "1") // 1번 레이어랑 충돌했을 경우
 {
   hideObject.SetActive(false); // hideObject를 사라지게 한다
 }  
}     


 !! 충돌 시에 오브젝트를 표시하는 OnCollision_show 같은 경우에는 일대일 대응으로만 가능하게 짜여진다. 이 코드로 여러개를 입력 시 버그가 발생한다.
 그러므로 다수를 대응할 수 있는 OnMultiCollision 코드를 따로 작성해주어야 한다.
 
 <OnMultiCollision_show 코드>
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class OnMultiCollision_Show : MonoBehaviour
{
    public string targetObjectName; //  목표 오브젝트 설정
    public string showObjectName; // 보여줄 오브젝트 설정

    GameObject showObject;
    float orgY = 0;
    float ofsetY = 10000; // showObjectName에 이 좌표값을 더해 지운다
    void Start()
    {
        showObject = GameObject.Find(showObjectName); // 대상 오브젝트를 찾아서
        orgY = showObject.transform.position.y;
        if (orgY > ofsetY)
        {
            orgY -= ofsetY;// 숨긴다
        }
        Vector3 pos = showObject.transform.position; // showObject에 좌표값을 더해 지운다
        pos.y = orgY + ofsetY;
        showObject.transform.position = pos;
    }
    
    void OnCollisionEnter2D(Collision2D collision)
    {
        if(collision.gameObject.name == targetObjectName)  // 목표 오브젝트와 충돌 시
        {
            Vector3 pos = showObject.transform.position;
            pos.y = orgY; // 목표오브젝트 좌표에 삽입
            showObject.transform.position = pos;// 대상 오브젝트 생성
        }
        
    }
}

