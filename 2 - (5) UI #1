< 유니티 UI >
▶ UI 함수들을 스크립트에 적용할 때
using UnityEngine.UI; <= 상단에 이 문구를 넣어주어야 함수들을 불러온다.

▶ UI 또한 기본 오브젝트처럼 레이어 및 태그, 스크립트 지정이 가능하다.

▶ 유니티에서 UI를 선택해 띄울경우 Canvas라는 오브젝트가 자동으로 생성이 되는데,
이 오브젝트는 UI를 구성할 수 있게 따로 띄워지는 오브젝트이다.

▶ Canvas로 띄워지는 UI들의 크기비율과 Camera에 보여지는 오브젝트들의 비율은 다르므로, 조정이 필요하다.

1) Image
=> Image란 말 그대로 이미지들을 삽입하여 설정할 수 있다. 크기나 위치도 자유롭게 조정이 가능하다. (이미지 이름 또한 변경가능)
# 하지만 그냥 사용하고 싶은 이미지를 그대로 Game 씬에 드래그하여 사용하는 것이 편하다.
UI로 설정해주었을 경우 상황에 따라 UI를 바꾸거나 생성시키는 등 기능들을 적용시킬 수 있다.


2) Text
=> Text 또한 말그대로 글자나 숫자를 사용하고 싶을 때 쓰는 UI 이다.
이 또한 Image와 동일하게 오브젝트로 추가되어 다양한 기능들을 적용 가능하다.
# 텍스트로 게임에 존재하는 값들도 표시할 수 있다.
Ex)
   public Text[] Texts; // 텍스트 배열 생성
   public int Score; // 점수

   void Start()
 {
        
   Texts[0].text = Score.ToString(); // Score의 값을 string으로 변경시켜 Text에 저장
 }
 
   void Update()
 {
        
   Texts[0].text = string.Format("{0:0}", Score); // 변환시킨 Score값을 그대로 텍스트에 표시
 }

3) Panel
=> Panel이란 Canvas 오브젝트의 크기만큼 하얀색 패널이 생성된다.
이 오브젝트는 주로 게임 내에서 쓰이는 값을 저장할때 쓰인다. (캐릭터의 능력치 및 영구재화)

4) Toggle
=> Toggle이란 선택사항을 체크하는 창을 띄워주는 UI로써 말 그대로 해당 글에 대한 확인 여부를 판단할때 사용한다.
   Toggle UI를 생성했을 경우, 체크표시를 누르는 버튼과 텍스트 항목으로 구성되어 있다.
   
5) Slider
=> Slider란 스크롤바를 의미한다. 스크롤바 오브젝트를 생성하면 Sliding Area라는 자식 객체가 만들어지는데,
   이는 스크롤이 가능한 범위를 표시하는 객체이다.
   
=> Slider는 주로 음향 및 밝기를 조절해주거나, 마우스를 사용할 경우 감도를 조정해주는 용도로 쓰인다.

6) Button
=> UI에서 정말 중요하다고 볼 수 있는 버튼을 생성시키는 객체이다.

=> 버튼을 생성하면 Inspector 창에 Button이라는 컴포넌트가 하나 생성된다.
   이 컴포넌트는 버튼의 기능에 관한 코드를 스크립트로 구현했을 때, 그 스크립트를 버튼에 직접 적용시킬 수 있게 하는 컴포넌트이다.

Ex)
   public Button[] buttons; // 버튼 객체들을 넣는 배열 생성
   public float attack; // 공격력 스텟
   public float MyMoney = 100.0f; // 현재 보유하고있는 재화

   void IncreaseAttack() // 공격력을 증가시키는 함수 생성
{
   MyMoney -= 10f; // 재화가 감소
   attack += 1f; // 공격력을 구매하여 업그레이드
   
   if(MyMoney < 0) // 재화가 0 미만일 때
  {
    buttons[0].SetActive = false; // 공격력 업그레이드 버튼을 비 ( 업글불가 )
  }
  
   else
  { 
   buttons[0[.SetActive = true; // 재화가 존재할 경우 버튼 활성화
  }
} 

  public void ButtonPush() // 버튼이 눌렀을때 실행되는 함수
{
   IncreaseAttack(); // 공격력 증가 함수
}


* GetButton 함수로도 버튼 호출 가능

GetButton >> 버튼을 누르는 동안 발생
GetButtonDown >> 버튼을 눌렀을 때만 발생
GetButtonUp >> 버튼을 뗐을 때만 발생

InputManager를 사용하여 기본적인 이동에 대한 키들을 조정 후 해당 버튼의 이름을 지정 -> GetButton() 함수로 호출

Ex) Player 라는 이름으로 상하좌우 이동을 입력받는 키를 설정

    if(Input.GetButtonDown("Player")
   {
     Debug.Log("점프하였습니다.");
   }  
