## Unity Script 기본 구성 ##
=> 유니티에서 일어나는 동작들은 보통 초기화 -> 물리연산 -> 게임로직 -> 해체 순으로 진행된다.

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class NewScriptName : Monobehaviour // NewScriptName 에 원하는 파일명 입력. 생성 직후에 스크립트 밖에서 이름변경 가능.
{
    void Awake() // 스크립트가 실행되기 전 최초로 시작되는 함수
  {
  
  }
  
    void OnEnable() // 오브젝트가 활성화 시 동작
  {
  
  }
    void Start() // 오브젝트가 시작할 때 동작
  {
   
  }
  
    void Update() // 오브젝트가 계속해서 해야하는 동작 (게임 로직이 업데이트된다)
  {
  
  }
  
    void OnDisable() // 오브젝트 비활성화 시 동작
  {
  
  }
} 

그 외에도
FixedUpdate() // 물리 연산을 실행하기 전에 실행되는 함수 (실행 주기가 고정)
OnCollisionEnter2D() // 충돌 판정 시 동작
OnMouseDown() // 마우스 클릭 또는 터치 시 동작
LastUpdate() // 업데이트 함수들이 실행된 후에 동작
OnDestroy() // 데이터가 파괴되었을 경우 동작

## 오브젝트 동작 코드 ##
오브젝트 이동 시 >> this.transform.Translate(x,y,z); // 이때 x,y,z 좌표는 변수형을 float로 설정해준다.
<코드 작성 방법>
public float speed; // 오브젝트가 이동할 속도 지정. (public 함수로 변경 시 코드 바깥에서 임의로 지정 가능.)
FixedUpdate() 사용 // 오브젝트가 이동할때에는 픽셀만큼 이동하기에 일정시간동안 계속해서 이동해야 함.
this.transform.Translate(speed/50 ,0 ,0); // 오브젝트가 이동해야 할 방향으로 해당 속도 대입.

오브젝트 회전 시 >> this.transform.Rotate(x,y,z); // 변수형 동일.
코드 작성 또한 위와 동일. ( public float speed -> angle 로 변경)

제자리 회전이 아닌 방향을 변경하는 회전 시
Count를 지정하여 해당 카운트 만족 시 한번 회전하는 방식.
<코드 작성 방법>
public float angle; // 회전할 각도 설정
public int MaxCount; // 회전 타이밍 카운트 설정
int count;
void Start()
count = 0; // 카운트 0부터 시작

void FixedUpdate()
count += 1; // 카운트 1씩 증가
if ( count == MaxCount) // 카운트가 끝날 때 회전 후 카운트를 다시 0으로 초기화
this.transform.Rotate(0,0,angle);
count = 0;

오브젝트 그림 반전 시 >> this.GetComponent<SpriteRenderer>().flipX = 반전여부; // flipY로 바꾸면 X축 대칭 반전
<코드 작성 방법>
this.transform.Rotate(0,0,180); // 오브젝트를 180도 회전

flipFlag = !flipFlag; // 오브젝트 그림이 좌우반전되므로 재반전 시켜준다
this.GetComponent<SpriteRenderer>().flipY = flipFlag;

## 오브젝트의 중첩 ##
가끔 여러개의 옵젝들을 같은 좌표에 배치해야되는 경우가 생기는데, 그랬을 때 생기는 중첩 지정 방법이 3가지 있다.
1. Sorting Layer 
이는 가장 강력하게 중첩을 설정할 수 있는 방법이다. 레이어들의 이름도 변경이 가능하여 가시성이 좋다.
위쪽에 위치한 레이어일수록 제일 뒤에 배치된다.

2. Order in Layer
중첩 내에서 수치(숫자)로 깊이를 지정하는 방법이다. 값이 클수록 앞쪽, 작을수록 뒤쪽에 배치된다.

3. Position Z
말 그대로 z좌표를 이용하는 방법이다. 2D에서는 카메라가 앞쪽에서 오브젝트를 보는 상태이므로 z축의 값이 클수록 뒤에 있는 것처럼 보이게 된다.
* 이 방법은 Order in Layer에서 서로 값이 같은 상태에서도 순서 지정이 가능하다.
