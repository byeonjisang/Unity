# 클래스란?
=> 데이터 및 동작들을 합쳐 캡슐화시키는 데이터 구조이다. 
   쉽게 얘기하면 모든 기능들을 구성하는 집합체라고 보면 된다. 객체를 만드는데 필수적인 설계도 같은 존재이다.

Ex) 게임 내에서 이름과 스코어를 가진 플레이어가 아이템을 수집하는 상황이라 가정하자.
    이런 상황들을 적용시키기 위해 클래스에 변수(필드)를 정의해야 한다. 그리고 플레이어의 이동, 공격, 수집등의 기능을 넣기 위해서는 함수를 만들어야 할 것이다.
    이들을 종합적으로 넣기 위해 클래스를 사용해야 하는 것이다.
    
■ 구성
접근 제한자 class 클래스명
{
  // 속성, 메소드, 이벤트 등
} 

Ex)
public class Player : MonoBehaviour // Player라는  (자식)클래스는 MonoBehaviour (부모)클래스를 상속하고 있다.
{
   string Name; // 클래스 내에서는 이러한 변수들을 선언할 수 있다
   int Hp;
   float score;
   
   void Moving();// 메소드 또한 선언하여 사용이 가능하다.
   
   private void Health();
   
   public void Damage();
}   

# 접근 제한자
1) public: 공개적이라는 뜻으로, 클래스 외부 및 내부 모두 접근이 가능하다. (자주 사용한다)
2) private: 해당 클래스 내에서만 접근이 가능하다.
3) protected: 상속받은 자식 클래스에게만 접근이 가능하다.

Ex)
public class Monster : MonoBehaviour
{
   public Player p; // 상단에 있는 Player라는 클래스의 메서드를 사용하기 위해 public으로 변수 선언
   
   p.Damage(); // Player 클래스에 있는 Damage 함수를 가져와서 사용(public 함수이기 때문에 사용 가능)
   
   p.Health(); // Health 함수는 private이기 때문에 접근이 불가하다. (오류 발생)
}   
