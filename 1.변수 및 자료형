## 변수 ##
모든 코딩에는 식이라는 것이 존재한다. 그 식을 구성하는 기본 요소를 '변수' 라고 부른다.
변수는 'x-10, x+2' 와 같은 식에서 x처럼 값을 다양하게 집어넣을 수 있는 미지수를 말함.
(변수의 이름은 x뿐만아니라 숫자, 특수기호를 제외한 한/영 단어가 가능하다.)
모든 변수에는 주소가 존재함. ex) x = 500 이라는 식은 x자체가 500이 아니라 x의 주소값에 500을 넣는 것을 말함.
변수에 값을 지정하기 위해서는 자료형을 설정해주어야 한다. -> 500은 정수형 값이므로 int x = 500;

이렇게 설정 해주는 변수값들을 출력하기 위해서는 print를 사용하여 값을 출력한다. -> printf(x);
그 후 저장하면, Unity의 Console 창에 500이라는 값이 입력될 것이다.
* 만약 Console창에 경고표시가 뜰 경우, 컴파일 에러가 났다는 뜻이므로 해당 부분을 고쳐야 한다.

이렇게 작성한 하나의 코드를 'Script'라고 칭하고 이는 혼자서는 아무런 능력이 없다.
>> 오브젝트가 존재해야만 스크립트를 입력해 동작 가능하다.
>> 새로운 스크립트를 생성할때 하나의 클래스가 생성될 것이다. ( public class ScriptName : MonoBehavior )
이때, 저장할 때의 전체 스크립트 제목과 생성된 클래스 이름인 ScriptName이 무조건 서로 일치해야 한다. (에러 발생)

## 자료형 ##
위에서 본 것 처럼 모든 변수에 값을 설정하기 위해서는 자료형이 필요하다.

-정수형인 int 를 제외한 동일한 자료형이 존재한다. (short, long)
short < int < long 자료형들은 정수형이지만 표현할 수 있는 값의 범위 차이와 차지하는 공간의 차이가 있다.(부등호 표시 참고)
ex) 'short a = 100' == 'int a = 100' == 'long a = 100'

-실수형 또한 float, double, decimal 같은 동일한 자료형이 존재한다.
ex) 'float a = 4.000001f' == 'double a = 4.0000001' == 'decimal a = 4.000001m'
>> float/double/decimal 의 값의 표기가 다른 이유는 오차 범위의 차이 때문이다. (float<double<decimal)
* 오차가 거의 없는 decimal은 정밀계산 시, 일반적으로는 float나 double을 많이 사용한다.

-문자형은 string 과 char 두 가지로 나뉜다.
string >> 영어,한글,숫자,특수문자 상관없이 구성된 문자변수를 담당하는 자료형이다. (string a = "123abc@가나다라")
char >> string과는 다르게 유니코드를 정하는 자료형이다. 즉, 문자를 코드로 읽는다는 뜻이다. (char a = 'A')
* char은 유니코드 자료형이기 때문에 2개이상의 문자열을 저장 할 수 없다.

-bool 형은 특정 값이 아니라 true/false(참/거짓) 값을 가지는 자료형이다.
ex) bool Flag = true; bool FakeFlag = false; 

## 자료형의 연산 ##
자료형이 다른 두 변수값은 연산이 가능하다.
>> 하지만, 결과값을 출력하는 자료형은 제일 범위가 큰 자료형으로 입력해야 한다.
1. 정수형 + 정수형
ex) int a = 100; long b = 200; 이고 sum=a+b;일 때, long sum; 이어야 한다.

2. 정수형 + 실수형
* 이 때의 경우 해결방법이 두 가지가 있다.
ex) int a = 100; float b = 100.12f; 일 때, sum=a+b;
2-1 sum=(int)(a+b); 처럼 식에서 a+b의 자료형을 강제로 int 변환시킨다. (이때는 정수형 값이므로 200만 출력된다)
2-2 float sum; 으로 설정한다. (정수는 실수에 포함) (값은 200.12로 출력된다)

3. 정수형 + 문자형
* 문자형은 수가 아니므로 연산이 불가능하다. 그래서 둘 중 하나의 자료형을 변환시켜 출력해야 한다.
ex) int a = 100; string b; 일 때
3-1 b = a.ToString(); -> int형인 a를 string형으로 변환시킨 것이다. (string a = "100";)
>> print(b); -> 100 (100은 숫자가 아닌 문자열)
ex) int a; string b="100"; 일 때
3-2 a = int.Parse(b); -> 반대로 string형인 b를 int형으로 변환시킨 것이다. (int b;)
>> print(a); -> 100 (100은 숫자)
* int.Parse 는 정수형변환 함수이기 때문에 문자열이 숫자가 아닌 다른 문자로 구성되면 에러가 발생(형변환 불가).
그래서 보편적으로 잘 사용하지는 않는다.


## 그룹형 변수 ##
그룹형 변수란, 변수들을 묶은 하나의 장소를 의미한다.
Ex) 
string[] monsters = { Zombie, Devil, Boss }; // string 변수 3개를 묶어 그룹으로 형성
int[] Level = new int[3]; // 레벨 변수를 받을 크기 3의 int형 배열 생성
Level[0] = 1; // Level의 0번째 자리에 값 추가
Level[1] = 100; // Level의 1번째 자리에 값 추가


Debug.Log(monsters[0]); // 0번째 주소의 몬스터 변수 출력
Debug.Log(monsters[1]); // 1번째 주소의 몬스터 변수 출력


▶ 리스트: 기능이 추가된 가변형 그룹형 변수라고 생각하면 된다.


