## 오브젝트의 Animation ##
Animation이란? >> 어떠한 오브젝트의 움직임 자체를 Animation이라고 부른다.
ex) 걷거나 뛰는 움직임, 불꽃이 변하는 움직임 등
* 설정방법 *
- 한 오브젝트의 움직임을 표시한 여러 장의 이미지를 준비한 후, 그 이미지들을 선택하여 scene에 드래그 드롭 하면 자동으로 생성이 된다.
- 애니매이션을 생성하게 되면, 해당 애니매이션의 속도나 전환할 수 있는 창이 생긴다. (애니매이션 창)
>> 다수의 Animation을 하나의 오브젝트에 통합하기 위한 것을 Animator 이라고 한다.
- Animator 창을 열어 생성한 Animation들을 추가시킨다. (이를 플립북 이라고 부름)
- 여러 Animation을 하나의 Animator에 넣어 서로 transition 시킬 수도 있다.
- 조건 충족이 애니매이션을 전환시키는 스크립트를 만든다. 

ex) 키 입력 시 오브젝트 애니매이션 전환 (OnKeyPress_ChangeAnime)
>> this.GetComponent<Animator>().Play(AnimationName); // AnimationName을 재생
1. public string 으로 키 입력별 전환하는 애니매이션 지정 및 해당 애니매이션을 지정할 변수이름 설정한다. (string nowAnime="";) 
2. Start() 함수에 처음 표시할 애니매이션을 지정한다. (nowAnime = dirAnime);
3. Update() 함수를 사용해서 Input.GetKey로 각 키를 입력할 때 전환할 애니매이션을 입력시킨다. ( if(Input.GetKey("") > nowAnime = dirAnime;)
4. FixedUpdate() 함수에 입력 시킨 애니매이션을 재생시킨다. (this.GetComponent<Animator>().Play(nowAnime));

## Scene 조정하기 ##
Scene이란? >> 프로젝트 안에 있는 화면 하나하나를 일컫는 말이다. (하나의 프로젝트 -> 여러개의 Scene)
Scene == 게임화면이며, 우리가 생성하거나 지정해준 오브젝트 및 기능들을 보여준다.
여러개의 Scene으로 하나의 게임이 만들어진다고 생각하면 이해가 쉽다.

이러한 Scene끼리의 전환도 가능하며, 데이터 또한 이동이 가능하다.

using UnityEngine.SceneManagement; <= 상단에 해당 문구를 입력해주면, Scene에 관련된 함수들을 사용이 가능하다.
1) LoadScene
=> 다른 씬으로 이동시켜주는 함수이다.
Ex)
using System.Collections;
using System.Collections.Generic;
using UnityEngine.SceneManagement; // 씬 관련 함수 사용
using UnityEngine;

public class LoadScene : MonoBehaviour
{
    public string SceneName;
    public int SceneNum;
  
    public void NextScene() // NextScene 이라는 사용사 설정 함수 생성
    {
        SceneManager.LoadScene(SceneName); // SceneName이라는 이름의 씬으로 이동
        SceneManager.LoadScene(SceneNum); // SceneNum번째 씬으로 이동
    }
}

2) DontDestroyOnLoad();
=> 씬을 전환할때 오브젝트 및 데이터가 파괴되지 않게 보존시켜주는 함수이다.

Ex)
  public static gameManager Instance;
  
  void Awake() // Start 함수와는 달리 모든 변수가 초기화된 후에 바로 실행된다. (Start 보다 먼저 실행됨)
{
  Instance = this;
  DontDestroyOnLoad(gameObject);
}









