 ## 게임을 정지시킬때 ##
 오브젝트들의 행동 전체를 중지시키고 싶을 때에는 Time.timeScale 을 이용하여 정지시키거나 재생시킬 수 있다. ( 정지일때는 0, 재생일때는 1)
 Collision2D 함수나 OnMouseButton 등 버튼함수에도 사용이 가능하다.
 * 시간을 정지시키는 함수를 코딩하려면 Start() 함수에 Time.timeScale = 1; 로 시간을 움직여야 한다. (시간이 처음부터 정지되어버림)
 
 ## 오브젝트 지움 및 표시할 때 ##
 오브젝트를 지우거나 표시할 경우에는 GameObject.SetActive(false/true); 를 사용하면 된다.
 보통 오브젝트끼리 충돌 시에 많이 사용하는 코드이다.
 >> targetObejctName 과 hide/showObjectName 변수를 지정하고 CollisionEnter2D 함수에서 if(collision.gmaeObject.name == targetObjectName) 일 때
 GameObject hide/showObject = GameObject.Find(hide/showObject); 로 지우거나 표시할 오브젝트를 찾은 후
 hide/showObject.SetActive(false/true); 로 해당 오브젝트를 지우거나 표시한다.
 
 !! 충돌 시에 오브젝트를 표시하는 OnCollision_show 같은 경우에는 일대일 대응으로만 가능하게 짜여진다. 이 코드로 여러개를 입력 시 버그가 발생한다.
 그러므로 다수를 대응할 수 있는 OnMultiCollision 코드를 따로 작성해주어야 한다.
 
 <OnMultiCollision_show 코드>
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class OnMultiCollision_Show : MonoBehaviour
{
    public string targetObjectName; //  목표 오브젝트 설정
    public string showObjectName; // 보여줄 오브젝트 설정

    GameObject showObject;
    float orgY = 0;
    float ofsetY = 10000; // showObjectName에 이 좌표값을 더해 지운다
    void Start()
    {
        showObject = GameObject.Find(showObjectName); // 대상 오브젝트를 찾아서
        orgY = showObject.transform.position.y;
        if (orgY > ofsetY)
        {
            orgY -= ofsetY;// 숨긴다
        }
        Vector3 pos = showObject.transform.position; // showObject에 좌표값을 더해 지운다
        pos.y = orgY + ofsetY;
        showObject.transform.position = pos;
    }
    
    void OnCollisionEnter2D(Collision2D collision)
    {
        if(collision.gameObject.name == targetObjectName)  // 목표 오브젝트와 충돌 시
        {
            Vector3 pos = showObject.transform.position;
            pos.y = orgY; // 목표오브젝트 좌표에 삽입
            showObject.transform.position = pos;// 대상 오브젝트 생성
        }
        
    }
}

## 마우스 클릭 판정 ##
마우스 클릭 시 행동은 OnMouseBtnDown() 이나 OnMouseBtnUp() 함수를 사용한다.
OnMouseBtnDown() >> 마우스가 클릭한 시점을 기준 OnMouseBtnUp() >> 마우스를 클릭 후 뗀 시점을 기준
ex) 마우스 클릭 시 오브젝트가 회전하는 방법 >> float angle, float Rotateangle 로 각도 지정 후 OnMouseBtnDown() 함수에서 클릭 했을 때
angle = Rotateangle 로 회전 각도 설정한 다음 FixedUpdate() this.transform.Rotate(0,0, Rotateangle/50); 으로 회전시킨다.
* 이를 이용하여 돌림판 제작이 가능하다. 단, 돌림판은 돌아가면서 서서히 멈추어야 하기 때문에 FixedUpdate() 함수에서 Rotateangle =  Rotateangle * 0.98f;
즉, 돌아가는 각도에 지속해서 1보다 작은 양수를 곱해주어야 멈추어간다.

## 오브젝트의 중첩 ##
가끔 여러개의 옵젝들을 같은 좌표에 배치해야되는 경우가 생기는데, 그랬을 때 생기는 중첩 지정 방법이 3가지 있다.
1. Sorting Layer 
이는 가장 강력하게 중첩을 설정할 수 있는 방법이다. 레이어들의 이름도 변경이 가능하여 가시성이 좋다.
위쪽에 위치한 레이어일수록 제일 뒤에 배치된다.

2. Order in Layer
중첩 내에서 수치(숫자)로 깊이를 지정하는 방법이다. 값이 클수록 앞쪽, 작을수록 뒤쪽에 배치된다.

3. Position Z
말 그대로 z좌표를 이용하는 방법이다. 2D에서는 카메라가 앞쪽에서 오브젝트를 보는 상태이므로 z축의 값이 클수록 뒤에 있는 것처럼 보이게 된다.
* 이 방법은 Order in Layer에서 서로 값이 같은 상태에서도 순서 지정이 가능하다.
